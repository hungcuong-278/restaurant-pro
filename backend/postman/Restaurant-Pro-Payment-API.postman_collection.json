{
  "info": {
    "name": "Restaurant-Pro-Payment-API",
    "description": "Complete Payment API test collection for Restaurant Pro\n\nWeek 7 - Phase 2 - Payment Backend\n\nFeatures:\n- Payment processing (cash, card, mobile)\n- Partial payments\n- Split bill (equal & custom)\n- Payment validation\n- Refunds\n- Payment history\n- Statistics\n\nAutomated Tests:\n- Status code validation\n- Response structure checks\n- Payment calculation verification\n- Order status updates\n- Error handling",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000/api",
      "type": "string"
    },
    {
      "key": "restaurantId",
      "value": "e4e7bcd3-3b50-47ba-8abc-3597170677bb",
      "type": "string"
    },
    {
      "key": "tableId",
      "value": "e1250430-deee-48d9-b721-386309092e67",
      "type": "string"
    },
    {
      "key": "menuItemId1",
      "value": "db9c9a7d-7f23-4caf-a7a4-1c16998d8fc7",
      "type": "string",
      "description": "Beef Tenderloin - $42.99"
    },
    {
      "key": "menuItemId2",
      "value": "268b5422-1074-46e3-8b39-0e9058f316bf",
      "type": "string",
      "description": "Grilled Salmon - $28.99"
    },
    {
      "key": "orderId",
      "value": "",
      "type": "string"
    },
    {
      "key": "paymentId",
      "value": "",
      "type": "string"
    },
    {
      "key": "orderTotal",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Setup - Create Test Order",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function() {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response has success flag', function() {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.true;",
              "});",
              "",
              "pm.test('Order created with ID', function() {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data).to.have.property('id');",
              "    pm.expect(jsonData.data).to.have.property('order_number');",
              "    pm.expect(jsonData.data).to.have.property('total_amount');",
              "    ",
              "    // Save for later tests",
              "    pm.collectionVariables.set('orderId', jsonData.data.id);",
              "    pm.collectionVariables.set('orderTotal', jsonData.data.total_amount);",
              "});",
              "",
              "pm.test('Order total calculated correctly', function() {",
              "    var jsonData = pm.response.json();",
              "    var total = parseFloat(jsonData.data.total_amount);",
              "    pm.expect(total).to.be.above(0);",
              "});",
              "",
              "pm.test('Payment status is unpaid', function() {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.payment_status).to.equal('unpaid');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"table_id\": \"{{tableId}}\",\n  \"order_type\": \"dine_in\",\n  \"customer_name\": \"Payment Test Customer\",\n  \"items\": [\n    {\n      \"menu_item_id\": \"{{menuItemId1}}\",\n      \"quantity\": 2,\n      \"special_instructions\": \"For payment testing\"\n    },\n    {\n      \"menu_item_id\": \"{{menuItemId2}}\",\n      \"quantity\": 1\n    }\n  ]\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/restaurants/{{restaurantId}}/orders",
          "host": ["{{baseUrl}}"],
          "path": ["restaurants", "{{restaurantId}}", "orders"]
        },
        "description": "Create a test order for payment testing"
      },
      "response": []
    },
    {
      "name": "2. Validate Payment Amount",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Validation result returned', function() {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data).to.have.property('is_valid');",
              "    pm.expect(jsonData.data).to.have.property('errors');",
              "    pm.expect(jsonData.data).to.have.property('order_total');",
              "    pm.expect(jsonData.data).to.have.property('remaining_amount');",
              "});",
              "",
              "pm.test('Validation passes for valid amount', function() {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.is_valid).to.be.true;",
              "    pm.expect(jsonData.data.errors).to.be.an('array').that.is.empty;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"amount\": {{orderTotal}}\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/restaurants/{{restaurantId}}/orders/{{orderId}}/validate-payment",
          "host": ["{{baseUrl}}"],
          "path": ["restaurants", "{{restaurantId}}", "orders", "{{orderId}}", "validate-payment"]
        },
        "description": "Validate payment amount before processing"
      },
      "response": []
    },
    {
      "name": "3. Process Cash Payment (Full)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function() {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Payment processed successfully', function() {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.true;",
              "    pm.expect(jsonData.data).to.have.property('payment');",
              "    pm.expect(jsonData.data).to.have.property('order_updated');",
              "});",
              "",
              "pm.test('Payment record created', function() {",
              "    var jsonData = pm.response.json();",
              "    var payment = jsonData.data.payment;",
              "    ",
              "    pm.expect(payment).to.have.property('id');",
              "    pm.expect(payment.payment_method).to.equal('cash');",
              "    pm.expect(payment.status).to.equal('completed');",
              "    ",
              "    // Save payment ID",
              "    pm.collectionVariables.set('paymentId', payment.id);",
              "});",
              "",
              "pm.test('Order status updated', function() {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.order_updated).to.be.true;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"payment_method\": \"cash\",\n  \"amount\": {{orderTotal}},\n  \"payment_details\": {\n    \"cash\": {\n      \"amount_received\": 150.00,\n      \"change_given\": 25.26\n    },\n    \"notes\": \"Full payment in cash\"\n  }\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/restaurants/{{restaurantId}}/orders/{{orderId}}/payments",
          "host": ["{{baseUrl}}"],
          "path": ["restaurants", "{{restaurantId}}", "orders", "{{orderId}}", "payments"]
        },
        "description": "Process full cash payment for order"
      },
      "response": []
    },
    {
      "name": "4. Get Payment Summary",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Payment summary returned', function() {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data).to.have.property('order_total');",
              "    pm.expect(jsonData.data).to.have.property('total_paid');",
              "    pm.expect(jsonData.data).to.have.property('remaining_amount');",
              "    pm.expect(jsonData.data).to.have.property('is_fully_paid');",
              "    pm.expect(jsonData.data).to.have.property('payments');",
              "});",
              "",
              "pm.test('Order is fully paid', function() {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.is_fully_paid).to.be.true;",
              "    pm.expect(jsonData.data.remaining_amount).to.be.at.most(0.01);",
              "});",
              "",
              "pm.test('Payment recorded in summary', function() {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.payments).to.be.an('array');",
              "    pm.expect(jsonData.data.payments.length).to.be.at.least(1);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/restaurants/{{restaurantId}}/orders/{{orderId}}/payment-summary",
          "host": ["{{baseUrl}}"],
          "path": ["restaurants", "{{restaurantId}}", "orders", "{{orderId}}", "payment-summary"]
        },
        "description": "Get payment summary for the order"
      },
      "response": []
    },
    {
      "name": "5. Get Payment by ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Payment details returned', function() {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data).to.have.property('id');",
              "    pm.expect(jsonData.data).to.have.property('order_id');",
              "    pm.expect(jsonData.data).to.have.property('payment_method');",
              "    pm.expect(jsonData.data).to.have.property('amount');",
              "    pm.expect(jsonData.data).to.have.property('status');",
              "});",
              "",
              "pm.test('Payment includes order details', function() {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data).to.have.property('order');",
              "    pm.expect(jsonData.data.order).to.have.property('order_number');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/restaurants/{{restaurantId}}/payments/{{paymentId}}",
          "host": ["{{baseUrl}}"],
          "path": ["restaurants", "{{restaurantId}}", "payments", "{{paymentId}}"]
        },
        "description": "Get single payment details by ID"
      },
      "response": []
    },
    {
      "name": "6. Get Payments for Order",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Payments list returned', function() {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data).to.be.an('array');",
              "    pm.expect(jsonData).to.have.property('count');",
              "});",
              "",
              "pm.test('Payments have correct structure', function() {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.data.length > 0) {",
              "        var payment = jsonData.data[0];",
              "        pm.expect(payment).to.have.property('id');",
              "        pm.expect(payment).to.have.property('payment_method');",
              "        pm.expect(payment).to.have.property('amount');",
              "        pm.expect(payment).to.have.property('status');",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/restaurants/{{restaurantId}}/orders/{{orderId}}/payments",
          "host": ["{{baseUrl}}"],
          "path": ["restaurants", "{{restaurantId}}", "orders", "{{orderId}}", "payments"]
        },
        "description": "Get all payments for an order"
      },
      "response": []
    },
    {
      "name": "7. Setup - Create Order for Partial Payment",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function() {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "var jsonData = pm.response.json();",
              "pm.collectionVariables.set('orderId', jsonData.data.id);",
              "pm.collectionVariables.set('orderTotal', jsonData.data.total_amount);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"table_id\": \"{{tableId}}\",\n  \"order_type\": \"dine_in\",\n  \"customer_name\": \"Partial Payment Test\",\n  \"items\": [\n    {\n      \"menu_item_id\": \"{{menuItemId1}}\",\n      \"quantity\": 1\n    }\n  ]\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/restaurants/{{restaurantId}}/orders",
          "host": ["{{baseUrl}}"],
          "path": ["restaurants", "{{restaurantId}}", "orders"]
        },
        "description": "Create order for partial payment testing"
      },
      "response": []
    },
    {
      "name": "8. Process Partial Payment 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function() {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Partial payment processed', function() {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.true;",
              "    pm.expect(jsonData.data.payment.amount).to.equal('20');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"payment_method\": \"cash\",\n  \"amount\": 20.00,\n  \"payment_details\": {\n    \"notes\": \"First partial payment\"\n  }\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/restaurants/{{restaurantId}}/orders/{{orderId}}/payments",
          "host": ["{{baseUrl}}"],
          "path": ["restaurants", "{{restaurantId}}", "orders", "{{orderId}}", "payments"]
        },
        "description": "Process first partial payment"
      },
      "response": []
    },
    {
      "name": "9. Process Partial Payment 2 (Complete)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function() {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Final payment processed', function() {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.true;",
              "    pm.expect(jsonData.data.order_updated).to.be.true;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"payment_method\": \"card\",\n  \"amount\": 26.64,\n  \"transaction_id\": \"card-test-{{$timestamp}}\",\n  \"payment_details\": {\n    \"card\": {\n      \"last4\": \"4242\",\n      \"brand\": \"visa\"\n    },\n    \"notes\": \"Final payment completing order\"\n  }\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/restaurants/{{restaurantId}}/orders/{{orderId}}/payments",
          "host": ["{{baseUrl}}"],
          "path": ["restaurants", "{{restaurantId}}", "orders", "{{orderId}}", "payments"]
        },
        "description": "Process second partial payment to complete order"
      },
      "response": []
    },
    {
      "name": "10. Setup - Create Order for Split Bill",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function() {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "var jsonData = pm.response.json();",
              "pm.collectionVariables.set('orderId', jsonData.data.id);",
              "pm.collectionVariables.set('orderTotal', jsonData.data.total_amount);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"table_id\": \"{{tableId}}\",\n  \"order_type\": \"dine_in\",\n  \"customer_name\": \"Split Bill Test\",\n  \"items\": [\n    {\n      \"menu_item_id\": \"{{menuItemId1}}\",\n      \"quantity\": 2\n    }\n  ]\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/restaurants/{{restaurantId}}/orders",
          "host": ["{{baseUrl}}"],
          "path": ["restaurants", "{{restaurantId}}", "orders"]
        },
        "description": "Create order for split bill testing"
      },
      "response": []
    },
    {
      "name": "11. Process Split Bill (Equal)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function() {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Split payment processed', function() {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.true;",
              "    pm.expect(jsonData.data).to.have.property('payments');",
              "    pm.expect(jsonData.data).to.have.property('order_updated');",
              "});",
              "",
              "pm.test('Multiple payments created', function() {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.payments).to.be.an('array');",
              "    pm.expect(jsonData.data.payments.length).to.equal(2);",
              "});",
              "",
              "pm.test('Payments split equally', function() {",
              "    var jsonData = pm.response.json();",
              "    var payments = jsonData.data.payments;",
              "    var amount1 = parseFloat(payments[0].amount);",
              "    var amount2 = parseFloat(payments[1].amount);",
              "    ",
              "    // Amounts should be equal (or very close due to rounding)",
              "    pm.expect(Math.abs(amount1 - amount2)).to.be.at.most(0.01);",
              "});",
              "",
              "pm.test('Order marked as paid', function() {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.order_updated).to.be.true;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"split_type\": \"equal\",\n  \"number_of_payers\": 2,\n  \"payment_method\": \"cash\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/restaurants/{{restaurantId}}/orders/{{orderId}}/split-payment",
          "host": ["{{baseUrl}}"],
          "path": ["restaurants", "{{restaurantId}}", "orders", "{{orderId}}", "split-payment"]
        },
        "description": "Process split bill with equal split"
      },
      "response": []
    },
    {
      "name": "12. Setup - Create Order for Custom Split",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function() {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "var jsonData = pm.response.json();",
              "pm.collectionVariables.set('orderId', jsonData.data.id);",
              "pm.collectionVariables.set('orderTotal', jsonData.data.total_amount);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"table_id\": \"{{tableId}}\",\n  \"order_type\": \"dine_in\",\n  \"customer_name\": \"Custom Split Test\",\n  \"items\": [\n    {\n      \"menu_item_id\": \"{{menuItemId2}}\",\n      \"quantity\": 2\n    }\n  ]\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/restaurants/{{restaurantId}}/orders",
          "host": ["{{baseUrl}}"],
          "path": ["restaurants", "{{restaurantId}}", "orders"]
        },
        "description": "Create order for custom split testing"
      },
      "response": []
    },
    {
      "name": "13. Process Split Bill (Custom)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function() {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Custom split processed', function() {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.true;",
              "    pm.expect(jsonData.data.payments.length).to.equal(3);",
              "});",
              "",
              "pm.test('Custom amounts applied', function() {",
              "    var jsonData = pm.response.json();",
              "    var payments = jsonData.data.payments;",
              "    ",
              "    var amount1 = parseFloat(payments[0].amount);",
              "    var amount2 = parseFloat(payments[1].amount);",
              "    var amount3 = parseFloat(payments[2].amount);",
              "    ",
              "    pm.expect(amount1).to.equal(20);",
              "    pm.expect(amount2).to.equal(20);",
              "    pm.expect(amount3).to.be.closeTo(22.86, 0.1);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"split_type\": \"custom\",\n  \"split_amounts\": [20.00, 20.00, 22.86],\n  \"payment_method\": \"cash\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/restaurants/{{restaurantId}}/orders/{{orderId}}/split-payment",
          "host": ["{{baseUrl}}"],
          "path": ["restaurants", "{{restaurantId}}", "orders", "{{orderId}}", "split-payment"]
        },
        "description": "Process split bill with custom amounts"
      },
      "response": []
    },
    {
      "name": "14. Test - Duplicate Payment (Should Fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 422 (Business Logic Error)', function() {",
              "    pm.response.to.have.status(422);",
              "});",
              "",
              "pm.test('Error message indicates order already paid', function() {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.false;",
              "    pm.expect(jsonData.message).to.include('already');",
              "    pm.expect(jsonData.code).to.equal('ORDER_ALREADY_PAID');",
              "});",
              "",
              "console.log('✓ Duplicate payment correctly prevented');"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"payment_method\": \"cash\",\n  \"amount\": 10.00,\n  \"payment_details\": {\n    \"notes\": \"Attempt duplicate payment\"\n  }\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/restaurants/{{restaurantId}}/orders/{{orderId}}/payments",
          "host": ["{{baseUrl}}"],
          "path": ["restaurants", "{{restaurantId}}", "orders", "{{orderId}}", "payments"]
        },
        "description": "Test that duplicate payment is prevented"
      },
      "response": []
    },
    {
      "name": "15. Get Payment Statistics",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Statistics returned', function() {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data).to.have.property('total_payments');",
              "    pm.expect(jsonData.data).to.have.property('total_amount');",
              "    pm.expect(jsonData.data).to.have.property('by_method');",
              "    pm.expect(jsonData.data).to.have.property('by_status');",
              "    pm.expect(jsonData.data).to.have.property('average_payment');",
              "    pm.expect(jsonData.data).to.have.property('refund_rate');",
              "});",
              "",
              "pm.test('Payment methods breakdown exists', function() {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.by_method).to.be.an('array');",
              "});",
              "",
              "pm.test('Payment status breakdown exists', function() {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.by_status).to.be.an('array');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/restaurants/{{restaurantId}}/payments/stats?start_date=2025-01-01&end_date=2025-12-31",
          "host": ["{{baseUrl}}"],
          "path": ["restaurants", "{{restaurantId}}", "payments", "stats"],
          "query": [
            {
              "key": "start_date",
              "value": "2025-01-01"
            },
            {
              "key": "end_date",
              "value": "2025-12-31"
            }
          ]
        },
        "description": "Get payment statistics for restaurant"
      },
      "response": []
    }
  ]
}
