// Payment Processing Page - Complete payment flow with method selection
import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import PaymentMethodSelector, { PaymentMethod } from '../components/payment/PaymentMethodSelector';
import PaymentQR from '../components/PaymentQR';
import Card from '../components/common/Card';

interface LocationState {
  orderNumber?: string;
  amount?: number;
  orderId?: string;
}

const PaymentProcessingPage: React.FC = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const state = location.state as LocationState;

  const [selectedMethod, setSelectedMethod] = useState<PaymentMethod | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);

  // Get order info from location state or URL params
  const orderNumber = state?.orderNumber || new URLSearchParams(location.search).get('order') || '';
  const amount = state?.amount || parseFloat(new URLSearchParams(location.search).get('amount') || '0');
  const orderId = state?.orderId;

  useEffect(() => {
    // If no order info, redirect back
    if (!orderNumber || !amount) {
      console.warn('Missing order information, redirecting...');
      // Don't redirect immediately, might be a direct page load
    }
  }, [orderNumber, amount]);

  const handleConfirmPayment = async () => {
    if (!selectedMethod) {
      alert('‚ö†Ô∏è Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n!');
      return;
    }

    setIsProcessing(true);

    try {
      // For in-store payments (cash/credit card)
      if (selectedMethod === 'cash' || selectedMethod === 'credit_card') {
        // Show confirmation message
        const confirmed = window.confirm(
          `‚úÖ X√°c nh·∫≠n thanh to√°n ${selectedMethod === 'cash' ? 'ti·ªÅn m·∫∑t' : 'th·∫ª t√≠n d·ª•ng'}\n\n` +
          `ƒê∆°n h√†ng: ${orderNumber}\n` +
          `S·ªë ti·ªÅn: ${amount.toLocaleString('vi-VN')} ‚Ç´\n\n` +
          `Vui l√≤ng ƒë·∫øn qu·∫ßy thanh to√°n ƒë·ªÉ ho√†n t·∫•t giao d·ªãch.`
        );

        if (confirmed) {
          // In production, would create pending payment record here
          // await paymentService.createPayment({ orderId, method: selectedMethod, amount });
          
          alert(
            'üè™ ƒê√£ x√°c nh·∫≠n ph∆∞∆°ng th·ª©c thanh to√°n!\n\n' +
            'Vui l√≤ng ƒë·∫øn qu·∫ßy thanh to√°n.\n' +
            'Nh√¢n vi√™n s·∫Ω x·ª≠ l√Ω thanh to√°n cho b·∫°n.'
          );

          // Redirect to order details or orders list
          if (orderId) {
            navigate(`/orders/${orderId}`);
          } else {
            navigate('/orders');
          }
        }
      }
      // For online payments (bank transfer/e-wallet)
      else if (selectedMethod === 'bank_transfer' || selectedMethod === 'e_wallet') {
        // Show QR code and payment instructions
        // User will see this in the render below
        alert(
          'üí≥ Vui l√≤ng qu√©t m√£ QR ho·∫∑c chuy·ªÉn kho·∫£n\n\n' +
          'Sau khi chuy·ªÉn kho·∫£n th√†nh c√¥ng,\n' +
          'vui l√≤ng l∆∞u l·∫°i x√°c nh·∫≠n giao d·ªãch.'
        );
      }
    } catch (error) {
      console.error('Payment error:', error);
      alert('‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i!');
    } finally {
      setIsProcessing(false);
    }
  };

  const handlePaymentCompleted = () => {
    const confirmed = window.confirm(
      '‚úÖ X√°c nh·∫≠n ƒë√£ chuy·ªÉn kho·∫£n th√†nh c√¥ng?\n\n' +
      'Vui l√≤ng gi·ªØ l·∫°i x√°c nh·∫≠n giao d·ªãch t·ª´ ng√¢n h√†ng.'
    );

    if (confirmed) {
      alert(
        'üéâ C·∫£m ∆°n qu√Ω kh√°ch!\n\n' +
        'ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n.\n' +
        'Nh√† h√†ng s·∫Ω x√°c nh·∫≠n khi nh·∫≠n ƒë∆∞·ª£c thanh to√°n.'
      );

      // Redirect to orders
      if (orderId) {
        navigate(`/orders/${orderId}`);
      } else {
        navigate('/orders');
      }
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8 px-4">
      <div className="max-w-4xl mx-auto">
        {/* Page Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-800 mb-2">
            üí≥ Thanh To√°n ƒê∆°n H√†ng
          </h1>
          <p className="text-gray-600">
            Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n ph√π h·ª£p v·ªõi b·∫°n
          </p>
        </div>

        {/* Order Summary Card */}
        <Card className="mb-6">
          <div className="p-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">
              üìã Th√¥ng Tin ƒê∆°n H√†ng
            </h3>
            
            <div className="space-y-3">
              <div className="flex justify-between items-center">
                <span className="text-gray-600">M√£ ƒë∆°n h√†ng:</span>
                <span className="font-mono font-semibold text-gray-800">
                  {orderNumber || 'N/A'}
                </span>
              </div>

              <div className="flex justify-between items-center pt-3 border-t">
                <span className="text-lg font-semibold text-gray-800">T·ªïng ti·ªÅn:</span>
                <span className="text-2xl font-bold text-blue-600">
                  {amount.toLocaleString('vi-VN')} ‚Ç´
                </span>
              </div>
            </div>
          </div>
        </Card>

        {/* Payment Method Selector */}
        <Card className="mb-6">
          <div className="p-6">
            <PaymentMethodSelector
              selectedMethod={selectedMethod}
              onSelect={setSelectedMethod}
            />
          </div>
        </Card>

        {/* Show QR Code for Online Payments */}
        {selectedMethod && (selectedMethod === 'bank_transfer' || selectedMethod === 'e_wallet') && (
          <div className="mb-6">
            <PaymentQR 
              orderNumber={orderNumber}
              amount={amount}
            />

            {/* Payment Instructions */}
            <Card className="mt-4">
              <div className="p-6">
                <h3 className="text-lg font-semibold text-gray-800 mb-4">
                  üìù H∆∞·ªõng D·∫´n Thanh To√°n
                </h3>

                <div className="space-y-3 text-sm text-gray-700">
                  <div className="flex items-start space-x-3">
                    <span className="text-blue-500 font-bold">1.</span>
                    <p>
                      <strong>Qu√©t m√£ QR</strong> b·∫±ng app ng√¢n h√†ng (VietQR, Napas 247) 
                      ho·∫∑c v√≠ ƒëi·ªán t·ª≠ (Momo, ZaloPay, VNPay)
                    </p>
                  </div>

                  <div className="flex items-start space-x-3">
                    <span className="text-blue-500 font-bold">2.</span>
                    <p>
                      Ho·∫∑c <strong>chuy·ªÉn kho·∫£n th·ªß c√¥ng</strong> theo th√¥ng tin t√†i kho·∫£n
                    </p>
                  </div>

                  <div className="flex items-start space-x-3">
                    <span className="text-blue-500 font-bold">3.</span>
                    <p>
                      <strong>N·ªôi dung chuy·ªÉn kho·∫£n:</strong> Nh·∫≠p ch√≠nh x√°c m√£ ƒë∆°n h√†ng 
                      <span className="font-mono font-semibold text-blue-600"> {orderNumber}</span>
                    </p>
                  </div>

                  <div className="flex items-start space-x-3">
                    <span className="text-blue-500 font-bold">4.</span>
                    <p>
                      <strong>S·ªë ti·ªÅn:</strong> Ch√≠nh x√°c 
                      <span className="font-semibold text-blue-600"> {amount.toLocaleString('vi-VN')} ‚Ç´</span>
                    </p>
                  </div>

                  <div className="flex items-start space-x-3">
                    <span className="text-blue-500 font-bold">5.</span>
                    <p>
                      Sau khi chuy·ªÉn kho·∫£n th√†nh c√¥ng, <strong>ch·ª•p l·∫°i m√†n h√¨nh x√°c nh·∫≠n</strong> 
                      v√† ·∫•n n√∫t "ƒê√£ Thanh To√°n" b√™n d∆∞·ªõi
                    </p>
                  </div>
                </div>

                {/* Completed Payment Button */}
                <button
                  onClick={handlePaymentCompleted}
                  className="w-full mt-6 py-3 bg-green-500 hover:bg-green-600 text-white font-semibold rounded-lg transition-colors"
                >
                  ‚úÖ ƒê√£ Chuy·ªÉn Kho·∫£n Th√†nh C√¥ng
                </button>
              </div>
            </Card>
          </div>
        )}

        {/* Action Buttons */}
        <div className="flex space-x-4">
          <button
            onClick={() => navigate(-1)}
            className="flex-1 py-3 bg-gray-200 hover:bg-gray-300 text-gray-700 font-semibold rounded-lg transition-colors"
          >
            ‚Üê Quay L·∫°i
          </button>

          {selectedMethod && (selectedMethod === 'cash' || selectedMethod === 'credit_card') && (
            <button
              onClick={handleConfirmPayment}
              disabled={isProcessing}
              className={`
                flex-1 py-3 font-semibold rounded-lg transition-colors
                ${isProcessing
                  ? 'bg-gray-400 cursor-not-allowed'
                  : 'bg-blue-500 hover:bg-blue-600 text-white'
                }
              `}
            >
              {isProcessing ? (
                <span className="flex items-center justify-center">
                  <svg className="animate-spin h-5 w-5 mr-2" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
                  </svg>
                  ƒêang x·ª≠ l√Ω...
                </span>
              ) : (
                '‚úÖ X√°c Nh·∫≠n Thanh To√°n'
              )}
            </button>
          )}
        </div>

        {/* Security Notice */}
        <div className="mt-6 text-center">
          <p className="text-sm text-gray-500 flex items-center justify-center">
            <span className="mr-2">üîí</span>
            Giao d·ªãch ƒë∆∞·ª£c b·∫£o m·∫≠t an to√†n
          </p>
        </div>
      </div>
    </div>
  );
};

export default PaymentProcessingPage;
